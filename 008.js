var x = 5; // 숫자형 (number)
var y = 'five'; // 문자형 (String)
var isTure = true // 불린형(Boolean)
var empty = null; // null
var nothing // undefined
var sym = Symbol('me'); // Symbol

var time = {
    price: 5000,
    count : 10
}; // 객체(Object)
var fruits = ['apple', 'orange', 'kiwi']; // 배열(Array)
var addFruit = function(fruit){
    fruits.push(fruit);
} // 함수(function)
addFruit('watermelon');
console.log(fruits);

// 자바스크립트는 크게 두가지로 나뉨
// 첫번째는 기본 타입이 되는 원시타입
// 두번째는 참조 타입

// 원시타입은 값이 변수에 할당될 때 메모리상에 고정된 크기로 조정한다.
// 즉 해당 변수가 직접 값을 보관한다. 예를 들어 숫자 5는 8바이트 메모리 공간을 차지하는
// 값이다. 이 값을 엑스라는 이름의 변수에 대입하면 변수 x는 8바이트 메모리 공간을 두고 직접
// 숫자 5라는 값을 보유하게됨. 이렇듯 고정된 공간에 보괸된 원시타입의 값은 변경 불가능한 값
// 불변값인 특징을 가짐. 이러한 원시타입 테이터 타입에는 숫자형, 불린형, 문자형, 심볼형
// null, undefined가 있다.

// 숫자형 : 숫자를 표현하는 자료형. 숫자 안에서도 정수, 실수, 등 여러종류를 구분하지만
// 자바스크립트의 숫자 자료형은 그 종류들을 숫자형 하나로 포괄한다. 숫자형끼리 연산이
// 가능함

// 문자형 : 작은 따옴표 ''또는 큰 따옴표 ""을 양 옆에 두고 그 안에 한 글자 이상의 문자,
// 기호 또는 숫자가 있는 자료형을 문자형이라고 합니다.

// 불린형 : 참 또는 거짓 두가지 값을 가진다. 

// 심볼형 : 심볼자료형은 ES6부터 추가된 원시 자료형이다. 다른 원시형과 다르게 유일하게
// 변경 불가능한 자료형으로 참조형의 키로도 사용가능하다.

// 참조타입은 원시타입과 달리변수에 고정된 크기를 저장하지 않고 값의 메모리 주소를 참조한다.
// 참조 타입인 객체의 특징을 살펴보면 그 이유를 알 수 있는데, 객체는 속서들의 집합을
// 의미하며, 집합 내부에는 순서도 크기도 고정되어 있지 않다.