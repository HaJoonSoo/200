// 표준 내장 객체의 String, Number, Boolean이 원시 자료형의 문자형, 숫자형, 불린형과 어떻게 다른지
// 내장 객체와 원시 자료형의 차이점에 대해 문자열 값을 두가지 형태로 대입하여 보자

const str1 = '자바스크립트 200제';
const str2 = new String('자바스크립트 200제');

console.log(typeof str1);
console.log(typeof str2);

console.log(str1 == '자바스크립트 200제')
console.log(str2 == new String('자바스크립트 200제'));

console.log(str1.valueOf());
console.log(str2.valueOf());

// 자바스크립트에서는 원시자료형이 각 성격에 맞게 표준 내장 객체로 자동으로 래핑된다
// 즉, 문자열로 작성된 값이 String 객체로 래핑된다는 의미이다
// 자료형을 확인하면 확연하게 다른것으로 구분되지만,
// 원시 자료형 값이지만 표준 내장 객체로 래핑됨에 따라 내장 객체에서 제공하는 메소드나 속성을 가져다 사용할 수 있다

// 동일한 문자열 '자바스크립트 200제'를 변수 str1과 str2에 대입한다
// 단, str2는 String객체로 선언한다

// typeOf는 변수에 할당된 값에 대한 자료형 정보를 문자열로 반환한다.
// typeOf를 활용하여 변수에 str1과 str2 자료형 정보를 확인해보면, 원시 자료형의 str1은 'String'을 반환하는 반면
// str2는 'object'를 반환한다.
// new String으로 선언했기 때문에 문자형과 관련된 정보가 반환될 것 같지만, String이란 이름의 객체이기 때문에 object를 반환한 것이다

// Object : 다른 표준 내장 개체의 기본이 되는 일반 객체이다

// Number : 숫자형을 감싼 객체이다. 숫자형과 관련된 함수와 속성을 가지고 있다

// String : 문자형을 감싼 객체이다. 문자형을 조작하거나 특정 문자열을 찾고 추출하는 등의 메소드와 속성을 활용할 수 있다

// Array : 모든 배열은 Array.property를 상속받는다. Array객체는 리스트처럼 배열 역할을 지니며, 배열 요소를 추가/삭제하거나
//배열 자체를 순회/변형하는 다양한 메소드와 속성을 지니고 있다

// Math : 수리 연산을 하기 위한 속성과 메소드를 지닌 내장 객체이다. 다른 내장 객체와 달리 Math객체는 new를 통해 인스턴스를 생성하지 않는다
//static으로 정의된 속성과 메소드를 직접 호출해야한다

// Date : 시간에 관련된 객체이다. 현재 시간을 비롯하여, 국제 표준시에 따른 시간 변환 계산도 가능하다

// JSON : JavaScript Object Notation을 의미한다 이를 다른 자료형으로 변환하거나 다시 JSON으로 변환하는 등의 메소드를 제공한다

// RegExp : 정규표현식은 특정 문자열 처리를 위해 사용하는 문자열 패턴 정의를 의미한다
// 정규표현식을 적용 가능한 문자열 탐색, 비교, 대체 등의 문자열 처리 메소드들을 지원한다

// Map : ES6부터 표준으로 추가된 Map객체는 키 : 값 데이터 구조를 지닌 데이터 집합체이다
// 키의 중복성을 허용하지 않으며 관련된 속성, 메소드들을 가지고 있다
// 또한 Iterartor를 통해 Map의 데이터를 순회한다는 특징이 있다.

// Set : ES6부터 표준으로 추가된 객체형으로, 오직 값으로 이루어진 데이터 집합체이다
// 그래서 언뜻 배열과 비슷하게 느껴질 수도 있으나 내부 속성, 메소드의 구성이 다르고 또한 Iterator로 순회한다는 점
// 값의 중복성을 허용하지 않는 차이점이 있다
