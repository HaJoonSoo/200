// 함수 이해하기
// 1. 키워드 function
// 함수 자료형은 키워드를 앞에 붙여 함수를 정의한다.
// 그러나 ES6부터는 키워드 없이도 함수를 정의할 수 있다

// 2. 함수의 이름
// funstion이나 소괄호() 사이에 이름을 정의하며 이를 통해 함수를 식별할 수 있다.
// 더 나아가 함수 내에서 재귀로 자기자신을 참조할 수도 있다,
// 이름을 정의하지 않은 함수도 존재하는데 이를 익명함수라고한다.

// 3. 매개변수 목록
// 함수 이름 옆에 소괄호로 둘러싸인 부분이 있다. 함수 선언시 매개변수르 목옥을 정의하면 함수를 호출할 때에 인자값을 전달할 수 있다.
// 물론 함수안에서 전역 변수를 가져와 변수를 처리할 수도 있지만, 되도록 매개변수를 통해 값을 전달하는것을 권장한다.

// 4. 함수 실행부
// 함수가 호출되면 실행되는 몸통부로 중괄호 안에 다발의 코드를 작성한다.

var grerting_expression = function(name) {
    console.log('Hi, ' + name);
}

function greeting_declaration(name) {
    console.log('Hi, ' + name);
}

grerting_expression('chloe');
greeting_declaration('chloe');

// 함수 표현식으로 함수를 만든다. 함수를 정의하면서 동시에 변수 grerting_expression에 바로 할당한다.
// 다시 말해 grerting_expression 변수에 함수 리터럴을 할당한다.

// 함수 선언문은 일반적인 다른 개발언어와 비슷한 함수 선언 방식으로 greeting_declaration이라는 함수 이름으로 선언한다.

// 함수를 호출할 때에는 함수 리터럴이 할당된 변수 이름 또는 함수 선언문의 함수 이름이 필요하다.
// 주의할 점은 함수 표현식에서 정의한 함수 이름은 해당 함수 안에서만 호출가능
// 그리고 선언된 함수가 매개변수를 필요로 하는 경우 소괄호 안에 전달할 값을 나열
// grerting_expression함수와 greeting_declaration는 정의한 방식이 다르지만
// 실행부 코드와 매개변수 목록이 같다 동일한 "chloe" 인자를 전달하여 각 함수를 호출함